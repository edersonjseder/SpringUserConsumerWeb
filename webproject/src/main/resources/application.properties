# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
#spring.datasource.driverClassName = com.mysql.jdbc.Driver
#spring.datasource.url = jdbc:mysql://localhost:3306/skeletoninfo
#spring.datasource.username = root
#spring.datasource.password = a

spring.datasource.driverClassName = org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://ec2-23-21-220-23.compute-1.amazonaws.com:5432/d93t4o9ko24rr7
spring.datasource.username=vgelltdrfdpkoz
spring.datasource.password=cbfbc69e02b3b47035fe23c0b293dd8bb90f036a85fc938eb4070b076ddac2e0

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.jpa.properties.jadira.usertype.autoRegisterUserTypes = true
